import React, { useState, useEffect } from 'react';
import { Download, Plus, Trash2, DollarSign, TrendingDown, Calendar, FileText, Tag, StickyNote } from 'lucide-react';

const ExpenseTracker = () => {
  const [monthlyIncome, setMonthlyIncome] = useState(0);
  const [expenses, setExpenses] = useState([]);
  const [currentMonth, setCurrentMonth] = useState(() => {
    const now = new Date();
    return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
  });
  const [newExpense, setNewExpense] = useState({
    amount: '',
    category: '',
    label: '',
    notes: '',
    date: new Date().toISOString().split('T')[0]
  });

  const categories = [
    'Food & Dining', 'Transportation', 'Shopping', 'Entertainment', 
    'Bills & Utilities', 'Healthcare', 'Education', 'Travel', 'Other'
  ];

  // Load data from localStorage on component mount
  useEffect(() => {
    const savedData = localStorage.getItem(`expenseData_${currentMonth}`);
    if (savedData) {
      const data = JSON.parse(savedData);
      setMonthlyIncome(data.monthlyIncome || 0);
      setExpenses(data.expenses || []);
    } else {
      setMonthlyIncome(0);
      setExpenses([]);
    }
  }, [currentMonth]);

  // Save data to localStorage whenever it changes
  useEffect(() => {
    const dataToSave = {
      monthlyIncome,
      expenses
    };
    localStorage.setItem(`expenseData_${currentMonth}`, JSON.stringify(dataToSave));
  }, [monthlyIncome, expenses, currentMonth]);

  const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);
  const remainingBudget = monthlyIncome - totalExpenses;

  const addExpense = () => {
    if (newExpense.amount && newExpense.category && newExpense.label) {
      const expense = {
        ...newExpense,
        amount: parseFloat(newExpense.amount),
        id: Date.now()
      };
      setExpenses([...expenses, expense]);
      setNewExpense({
        amount: '',
        category: '',
        label: '',
        notes: '',
        date: new Date().toISOString().split('T')[0]
      });
    }
  };

  const deleteExpense = (id) => {
    setExpenses(expenses.filter(exp => exp.id !== id));
  };

  const exportToCSV = () => {
    const headers = ['Date', 'Category', 'Label', 'Amount', 'Notes'];
    const csvData = expenses.map(exp => [
      exp.date,
      exp.category,
      exp.label,
      exp.amount,
      exp.notes || ''
    ]);
    
    const csvContent = [headers, ...csvData]
      .map(row => row.map(field => `"${String(field).replace(/"/g, '""')}"`).join(','))
      .join('\n');
    
    // Create and trigger download
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `expenses-${currentMonth}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportToPDF = () => {
    const monthName = new Date(currentMonth + '-15').toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long' 
    });
    
    const printContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>Monthly Expense Report - ${monthName}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 20px; 
              color: #333;
            }
            .header { 
              text-align: center; 
              margin-bottom: 30px; 
              border-bottom: 2px solid #333;
              padding-bottom: 20px;
            }
            .summary { 
              background: #f5f5f5; 
              padding: 20px; 
              margin-bottom: 30px; 
              border-radius: 5px;
              display: grid;
              grid-template-columns: 1fr 1fr 1fr;
              gap: 20px;
            }
            .summary-item {
              text-align: center;
            }
            .summary-item h3 {
              margin: 0 0 10px 0;
              color: #666;
              font-size: 14px;
            }
            .summary-item .amount {
              font-size: 24px;
              font-weight: bold;
              margin: 0;
            }
            .income { color: #16a34a; }
            .expenses { color: #dc2626; }
            .remaining { color: #2563eb; }
            .remaining.negative { color: #ea580c; }
            
            table { 
              width: 100%; 
              border-collapse: collapse; 
              margin-top: 20px; 
              font-size: 12px;
            }
            th, td { 
              border: 1px solid #ddd; 
              padding: 10px; 
              text-align: left; 
            }
            th { 
              background-color: #f8f9fa; 
              font-weight: bold;
              color: #333;
            }
            .amount-col { text-align: right; }
            .category-cell {
              background: #e3f2fd;
              color: #1976d2;
              padding: 4px 8px;
              border-radius: 12px;
              font-size: 10px;
              display: inline-block;
            }
            .notes-col { 
              max-width: 200px; 
              word-wrap: break-word; 
            }
            .total-row {
              background-color: #f8f9fa;
              font-weight: bold;
            }
            @media print {
              body { margin: 0; }
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Monthly Expense Report</h1>
            <h2>${monthName}</h2>
            <p>Generated on ${new Date().toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long', 
              day: 'numeric'
            })}</p>
          </div>
          
          <div class="summary">
            <div class="summary-item">
              <h3>Monthly Income</h3>
              <p class="amount income">${monthlyIncome.toFixed(2)}</p>
            </div>
            <div class="summary-item">
              <h3>Total Expenses</h3>
              <p class="amount expenses">${totalExpenses.toFixed(2)}</p>
            </div>
            <div class="summary-item">
              <h3>Remaining Budget</h3>
              <p class="amount remaining ${remainingBudget < 0 ? 'negative' : ''}">
                ${remainingBudget.toFixed(2)}
              </p>
            </div>
          </div>

          <h3>Expense Details</h3>
          <table>
            <thead>
              <tr>
                <th>Date</th>
                <th>Category</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Notes</th>
              </tr>
            </thead>
            <tbody>
              ${expenses.length === 0 ? 
                '<tr><td colspan="5" style="text-align: center; color: #666; font-style: italic;">No expenses recorded for this month</td></tr>' :
                expenses
                  .sort((a, b) => new Date(b.date) - new Date(a.date))
                  .map(exp => `
                    <tr>
                      <td>${new Date(exp.date).toLocaleDateString()}</td>
                      <td>
                        <span class="category-cell">${exp.category}</span>
                      </td>
                      <td>${exp.label}</td>
                      <td class="amount-col">${exp.amount.toFixed(2)}</td>
                      <td class="notes-col">${exp.notes || '-'}</td>
                    </tr>
                  `).join('')
              }
              ${expenses.length > 0 ? `
                <tr class="total-row">
                  <td colspan="3"><strong>TOTAL</strong></td>
                  <td class="amount-col"><strong>${totalExpenses.toFixed(2)}</strong></td>
                  <td></td>
                </tr>
              ` : ''}
            </tbody>
          </table>
          
          <div style="margin-top: 30px; text-align: center; color: #666; font-size: 12px;">
            <p>This report was generated automatically by your Personal Expense Tracker</p>
          </div>
        </body>
      </html>
    `;
    
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(printContent);
      printWindow.document.close();
      
      // Wait for content to load, then print
      setTimeout(() => {
        printWindow.print();
        // Close the window after printing (optional)
        printWindow.onafterprint = () => printWindow.close();
      }, 500);
    } else {
      alert('Please allow popups to export PDF. You can also try copying the content manually.');
    }
  };

  const getCategoryTotal = (category) => {
    return expenses
      .filter(exp => exp.category === category)
      .reduce((sum, exp) => sum + exp.amount, 0);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-800 mb-4 flex items-center gap-2">
            <DollarSign className="text-green-600" />
            Monthly Expense Tracker
          </h1>
          
          {/* Month/Year Selection */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              <Calendar className="inline mr-1" size={16} />
              Select Month & Year
            </label>
            <input
              type="month"
              value={currentMonth}
              onChange={(e) => setCurrentMonth(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <span className="ml-3 text-sm text-gray-600">
              Currently viewing: {new Date(currentMonth + '-15').toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long' 
              })}
            </span>
          </div>

          {/* Monthly Income Input */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Monthly Income for {new Date(currentMonth + '-15').toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long' 
              })}
            </label>
            <input
              type="number"
              value={monthlyIncome}
              onChange={(e) => setMonthlyIncome(parseFloat(e.target.value) || 0)}
              className="w-full md:w-64 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter your monthly income"
            />
          </div>

          {/* Budget Summary */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
            <div className="bg-green-100 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <DollarSign className="text-green-600" size={20} />
                <span className="text-sm font-medium text-green-700">Income</span>
              </div>
              <p className="text-2xl font-bold text-green-800">${monthlyIncome.toFixed(2)}</p>
            </div>
            
            <div className="bg-red-100 p-4 rounded-lg">
              <div className="flex items-center gap-2">
                <TrendingDown className="text-red-600" size={20} />
                <span className="text-sm font-medium text-red-700">Expenses</span>
              </div>
              <p className="text-2xl font-bold text-red-800">${totalExpenses.toFixed(2)}</p>
            </div>
            
            <div className={`p-4 rounded-lg ${remainingBudget >= 0 ? 'bg-blue-100' : 'bg-orange-100'}`}>
              <div className="flex items-center gap-2">
                <DollarSign className={remainingBudget >= 0 ? 'text-blue-600' : 'text-orange-600'} size={20} />
                <span className={`text-sm font-medium ${remainingBudget >= 0 ? 'text-blue-700' : 'text-orange-700'}`}>
                  Remaining
                </span>
              </div>
              <p className={`text-2xl font-bold ${remainingBudget >= 0 ? 'text-blue-800' : 'text-orange-800'}`}>
                ${remainingBudget.toFixed(2)}
              </p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Add Expense Form */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
              <Plus className="text-blue-600" />
              Add New Expense
            </h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  <Calendar size={16} className="inline mr-1" />
                  Date
                </label>
                <input
                  type="date"
                  value={newExpense.date}
                  onChange={(e) => setNewExpense({...newExpense, date: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  <Tag size={16} className="inline mr-1" />
                  Category
                </label>
                <select
                  value={newExpense.category}
                  onChange={(e) => setNewExpense({...newExpense, category: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Select a category</option>
                  {categories.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  <FileText size={16} className="inline mr-1" />
                  Label
                </label>
                <input
                  type="text"
                  value={newExpense.label}
                  onChange={(e) => setNewExpense({...newExpense, label: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="e.g., Grocery shopping"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  <DollarSign size={16} className="inline mr-1" />
                  Amount
                </label>
                <input
                  type="number"
                  step="0.01"
                  value={newExpense.amount}
                  onChange={(e) => setNewExpense({...newExpense, amount: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="0.00"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  <StickyNote size={16} className="inline mr-1" />
                  Notes (Optional)
                </label>
                <textarea
                  value={newExpense.notes}
                  onChange={(e) => setNewExpense({...newExpense, notes: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Add any additional notes..."
                  rows="3"
                />
              </div>

              <button
                onClick={addExpense}
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center justify-center gap-2"
              >
                <Plus size={16} />
                Add Expense
              </button>
            </div>
          </div>

          {/* Export and Category Summary */}
          <div className="space-y-6">
            {/* Export Buttons */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
                <Download className="text-purple-600" />
                Export Data
              </h2>
              
              {expenses.length > 0 ? (
                <div className="space-y-3">
                  <button
                    onClick={exportToCSV}
                    className="w-full bg-green-600 text-white px-4 py-3 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center gap-2 font-medium"
                  >
                    <Download size={18} />
                    Export to CSV File
                    <span className="text-xs opacity-75">(Excel compatible)</span>
                  </button>
                  <button
                    onClick={exportToPDF}
                    className="w-full bg-red-600 text-white px-4 py-3 rounded-md hover:bg-red-700 transition-colors flex items-center justify-center gap-2 font-medium"
                  >
                    <Download size={18} />
                    Export to PDF File
                    <span className="text-xs opacity-75">(Print or save)</span>
                  </button>
                  <p className="text-xs text-gray-500 text-center mt-2">
                    CSV files open in Excel/Google Sheets. PDF export opens print dialog.
                  </p>
                </div>
              ) : (
                <div className="text-center py-6">
                  <Download className="mx-auto text-gray-300 mb-3" size={32} />
                  <p className="text-gray-500">No expenses to export yet</p>
                  <p className="text-xs text-gray-400">Add some expenses to enable exports</p>
                </div>
              )}
            </div>

            {/* Category Summary */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4">
                Spending by Category
              </h2>
              
              <div className="space-y-3">
                {categories.map(category => {
                  const total = getCategoryTotal(category);
                  const percentage = monthlyIncome > 0 ? (total / monthlyIncome) * 100 : 0;
                  
                  return total > 0 ? (
                    <div key={category} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                      <span className="font-medium text-gray-700">{category}</span>
                      <div className="text-right">
                        <span className="font-bold text-gray-800">${total.toFixed(2)}</span>
                        <div className="text-xs text-gray-500">{percentage.toFixed(1)}% of income</div>
                      </div>
                    </div>
                  ) : null;
                })}
                
                {totalExpenses === 0 && (
                  <p className="text-gray-500 text-center py-4">No expenses recorded yet</p>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Expense List */}
        <div className="bg-white rounded-lg shadow-md p-6 mt-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-800">
              Expenses for {new Date(currentMonth + '-15').toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long' 
              })}
            </h2>
          </div>

          {expenses.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-gray-400 mb-4">
                <FileText size={48} className="mx-auto" />
              </div>
              <p className="text-gray-500 text-lg">No expenses recorded for this month</p>
              <p className="text-gray-400 text-sm">Add your first expense using the form above</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full table-auto">
                <thead>
                  <tr className="bg-gray-50">
                    <th className="text-left p-3 font-medium text-gray-700">Date</th>
                    <th className="text-left p-3 font-medium text-gray-700">Category</th>
                    <th className="text-left p-3 font-medium text-gray-700">Description</th>
                    <th className="text-right p-3 font-medium text-gray-700">Amount</th>
                    <th className="text-left p-3 font-medium text-gray-700">Notes</th>
                    <th className="text-center p-3 font-medium text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {expenses
                    .sort((a, b) => new Date(b.date) - new Date(a.date))
                    .map(expense => (
                    <tr key={expense.id} className="border-t hover:bg-gray-50 transition-colors">
                      <td className="p-3 text-gray-800">
                        {new Date(expense.date).toLocaleDateString('en-US', {
                          month: 'short',
                          day: 'numeric',
                          year: 'numeric'
                        })}
                      </td>
                      <td className="p-3">
                        <span className="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                          {expense.category}
                        </span>
                      </td>
                      <td className="p-3 text-gray-800 font-medium">{expense.label}</td>
                      <td className="p-3 text-right font-bold text-gray-800">${expense.amount.toFixed(2)}</td>
                      <td className="p-3 text-gray-600 max-w-xs">
                        <div className="truncate" title={expense.notes}>
                          {expense.notes || '-'}
                        </div>
                      </td>
                      <td className="p-3 text-center">
                        <button
                          onClick={() => deleteExpense(expense.id)}
                          className="text-red-600 hover:text-red-800 hover:bg-red-50 p-2 rounded transition-colors"
                          title="Delete this expense"
                        >
                          <Trash2 size={16} />
                        </button>
                      </td>
                    </tr>
                  ))}
                  <tr className="border-t-2 border-gray-300 bg-gray-50 font-semibold">
                    <td colSpan="3" className="p-3 text-gray-800">TOTAL EXPENSES</td>
                    <td className="p-3 text-right text-gray-800">${totalExpenses.toFixed(2)}</td>
                    <td colSpan="2"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ExpenseTracker;
